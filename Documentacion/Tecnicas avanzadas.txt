

						Tecnicas avanzadas
					
MIRO maqueta:  https://miro.com/app/board/uXjVO3sFv8U=/?share_link_id=914684798368
Drive: https://drive.google.com/drive/folders/1k8mBhc_SrTFs0y_xlPAXIHqAhNmB_DHO?usp=sharing

software
	https://www.mozilla.org/es-AR/firefox/developer/
	https://git-scm.com/downloads
	https://code.visualstudio.com/
	https://www.apachefriends.org/es/index.html
	https://dev.mysql.com/downloads/installer/
	https://github.com/Americosys/Tecnicas-Avanzadas
	
Link info tutoriales

https://www.tutorialesprogramacionya.com/desarrollowebconphp/index.php?inicio=0


usar interface (profesor / directivo) class abstract

Estado (Borrado Logico)
Modificar
	Quitar el guion bajo, segunda palabra en mayuscula

Recordar: interpuestas (revisar)
 No todas las clases se mapean con la base datos 
 
 ABM
	SP todos en la DB
	
Diagrama de arquitectura general antes de programar
mirar los videos de MBC(Framework)

Arrancar por un ABM basico
probar con datos  

Para el 30 de mayo tenemos un alta

15 julio finaliza la cursada 
----------------------------------------------

Spring data: acceso y modificacion de sistemas de persistencia, como: base de datos relacionales o no

Crear proyecto sprint boot:
 start.spring.io
	setear 
		proyecto -> Maven Proyect
		lenguage -> Java
		vesion de sprint boot -> 2.4.3
		cambiar  nombre del artefacto -> Por el nombre del proyecto
		agregar las dependencias
			sprint boot devTools
			sprint web 
			Thymeleaf
			sprint data JDBC
			PosgreSQL DRIVER
	GENERAR EL ZIP con toda la info antes seteada
	descomprimir la carpeta
	importar el proyecto desde la carpeta descomprimida

## aca saque info
https://www.youtube.com/watch?v=bVM6MX-dGJI
https://www.youtube.com/watch?v=7ufmaL1UU0s
	
 vscode 
	command palette
		spring create maven project 
			version xxx
			lenguage Java
			paquete por default (Group ID) -> com.example
			artefacto -> asignarle nombre al proyecto
			JAR
				Version xxx
					liberias
						Spring boot DevTools
						spring web ....build web....using spring mvc
						Thymeleaf template Engines
						spring data JDBC 
						spring data in sql stores with java persistence API using Spring data hibernate
						MySQL Driver SQL
						
			
	Elegir carpeta donde guardar proyecto


********************** notas ******************

pom.xml -> tiene todas las dependencias

application.properties -> tiene las configuracion 

# aqui indicamos que la base de datos esta local  
sprint.datasource.url=jdbc:mysql://localhost:3306/instituto_smdl?serverTimezone=UTC
sprint.datasource.username=root
# sprint.datasource.password=adminadmin
sprint.datasource.password=
sprint.datasource.driver-class-name=com.msql.cj.jdbc.Driver

sprint.jpa.hibernate.ddl-auto=create


# sprint.datasource.url=jdbc:mysql://localhost:3306/Americo?currentSchema=instituto_smdl
# sprint.datasource.username=root
# sprint.datasource.password=adminadmin

 
# ==== connect to mysql ======#
# spring.jpa.hibernate.ddl-auto=update
# spring.datasource.url=jdbc:mysql://localhost:3306/mysqltutorial?useSSL=false
# spring.datasource.username=root
# spring.datasource.password=
# spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect



opcion 2 - GMT
	spring.datasource.url=jdbc:mysql://localhost:yourDatabase?serverTimezone=UTC
	spring.datasource.username=${USERNAME} 
	spring.datasource.password=${PASSWORD}
	spring.jpa.hibernate.ddl-auto=create-drop
	spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
	spring.logging.level.org.hibernate.SQL=debug
	spring.jpa.show-sql=true
	
Opcion 3
	spring.datasource.url=jdbc:mysql://localhost:yourDatabase?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDataTimeCode=false&serverTimezone=America/Argentina/Buenos_Aires
	#serverTimezone=UTC
	spring.datasource.username=${USERNAME} 
	spring.datasource.password=${PASSWORD}
	spring.datasource.driver-class-name=com.mysql.jdbc.Driver
	spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
	spring.jpa.hibernate.ddl-auto=update 	
	logging.level.org.hibernate.SQL=debug
	server.port=${PORT:8080}
 
 *****************************************************
 setting.json
 
 {
    "java.project.sourcePaths": ["src"],
    "java.project.outputPath": "bin",
    "java.project.referencedLibraries": [
        "lib/**/*.jar",
        "c:\\Program Files (x86)\\MySQL\\Connector J 8.0\\mysql-connector-java-8.0.29.jar"
    ],
    "sqltools.connections": [
        {
            "mysqlOptions": {
                "authProtocol": "default"
            },
            "previewLimit": 50,
            "server": "localhost",
            "port": 3306,
            "driver": "MySQL",
            "name": "connectionInstitutoDB",
            "database": "instituto_smdl",
            "username": "sqluser",
            "password": "password"
        },
        {
            "mysqlOptions": {
                "authProtocol": "default"
            },
            "previewLimit": 50,
            "server": "localhost",
            "port": 3306,
            "driver": "MySQL",
            "name": "connectionInstitutoDB2",
            "database": "instituto_smdl",
            "username": "root",
            "password": "adminadmin"
        }
    ]
}

xmlns:th="http:/www.thymeleaf.org"
http://127.0.0.1:5500/

vamos de nuevo jajaja
me bajo https://spring.io/tools


	@Override
	public List<Usuario> getAllUsuarios() {
		// TODO Auto-generated method stub
		//spGetAllUsuario		
		//List<Usuario> usuarios = usuarioRepo.findAll();
		List<Usuario> usuarios = usuarioRepo.spGetAllUsuario(null);
		return usuarios;
	}

------------------------------- INFO HTML ----------------------------------
<td>
	<a> class "btn btn-warning">Editar</a>
	<a> class "btn btn-danger">Eliminar</a>
</td>                        

<meta charset="UTF-8"> x <meta charset="ISO-8859-1">

<th>Id Rol</th>
 <td th:text="${usuario.rol}"></td>

aca te redirecciona al formulario "formAgregarUsuario"
<a> th:href=@{/newUsuario} class="btn btn-primary"> Agregar</a>

/new = newUsuario

</div class="container mt-4">
	</div class="col-sm-6">
		<form th:action="@{/insertUsuario}" th:objeto=${usuario} method="POST">
			<div class="card"> 
				<div class="card-header">
				<h3>Agregar Usuario</h3> 
				</div>					
				<div class="card-body">
					<div class="form-group"
							<label>DNI</label>
							<imput th:field=*"{dni}" type="text" class="form-control"/>
					</div>
				</div>
				<div class="card-footer"></div>
			</div>
		</form>	 
	</div>
</div>

<imput type="submit" value="Guardar" class="btn btn-success">

en el controlador 
@GetMapping(/newUsuario)
public String insertUsuario(Model model) {
	model.addAttribute("usuario", new usuario());
	return "formAgregarUsuario"
}

public String guardarUsuario(@Valid Usuario u, Model model) {
	service.guardarUsuario(u);
	return "redirect:/GetAllUsuarios"	
}





*********************************** info annotation -----------------------------
Para que se usan las annotation?

@Controller
@Service
@Autowired
@Override
@Procedure
@Column
@Entity
@Table
@GeneratedValue(strategy = GenerationType.IDENTITY)
@GetMapping




hay que agregar un annotation a la interface servicio?


	dni
	idRol
	nickname
	clave
	nombre
	fechaNacimiento
    edad
    email
    fechaAlta
    direccion
    telefono
    activo
    